{"version":3,"file":"static/js/563.5262c1b8.chunk.js","mappings":"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","sources":["components/Loader.js","components/Map.js"],"sourcesContent":["import React from \"react\";\r\nimport \"./style/loader.css\";\r\nexport default function Loader() {\r\n  return (\r\n    <div className=\"loader-parent\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useCallback, useRef } from \"react\";\r\nimport Loader from \"./Loader\";\r\nimport \"./style/map.css\";\r\nimport {\r\n  FaWrench,\r\n  FaArrowUp,\r\n  FaArrowDown,\r\n  FaCrosshairs,\r\n  FaHistory,\r\n} from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Map() {\r\n  const [pos, setPos] = useState(null);\r\n  const [map, setMap] = useState(null);\r\n  const [linePath, setLinePath] = useState([]);\r\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\r\n  const [checkpointDistance, setCheckpointDistance] = useState(0);\r\n  const [totalDistance, setTotalDistance] = useState(0);\r\n  const [totalDisplacement, setTotalDisplacement] = useState(0);\r\n  const markerRef = useRef(null);\r\n  const lineRef = useRef(null);\r\n  const [statsView, setStatsView] = useState(true);\r\n  const [pathToProcess, setPathToProcess] = useState(10);\r\n\r\n  const statsViewerToggle = () => {\r\n    const trgt = document.getElementsByClassName(\"stats-child\")[0];\r\n    if (trgt) {\r\n      if (statsView) {\r\n        setStatsView(false);\r\n        trgt.style.height = \"0\";\r\n        trgt.style.overflow = \"hidden\";\r\n      } else {\r\n        setStatsView(true);\r\n        trgt.style.height = \"200px\";\r\n        trgt.style.overflow = \"auto\";\r\n      }\r\n    } else {\r\n      alert(\"No Div found!\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (!window.google) {\r\n      const script = document.createElement(\"script\");\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAP_API}&map_ids=YOUR_MAP_ID&v=beta&libraries=marker`;\r\n      script.async = true;\r\n      script.defer = true;\r\n      document.head.appendChild(script);\r\n      script.onload = () => setIsMapLoaded(true);\r\n    } else {\r\n      setIsMapLoaded(true);\r\n    }\r\n  }, []);\r\n\r\n  // Initialize map, marker, and polyline\r\n  useEffect(() => {\r\n    if (!isMapLoaded || !pos) return;\r\n    if (map) return;\r\n\r\n    const mapInstance = new window.google.maps.Map(\r\n      document.getElementById(\"map\"),\r\n      {\r\n        center: pos,\r\n        zoom: 20,\r\n        mapId: \"YOUR_MAP_ID\",\r\n      }\r\n    );\r\n    setMap(mapInstance);\r\n    // const imageMarker = document.createElement(\"img\");\r\n    // imageMarker.src = \"/PocketGPS/marker.gif\";\r\n    // imageMarker.width = \"50\";\r\n    // imageMarker.style.mixBlendMode = \"screen\";\r\n    markerRef.current = new window.google.maps.marker.AdvancedMarkerElement({\r\n      map: mapInstance,\r\n      position: pos,\r\n      title: \"You are here!\",\r\n      id: \"user-location-marker\",\r\n      // content: imageMarker,\r\n    });\r\n\r\n    lineRef.current = new window.google.maps.Polyline({\r\n      map: mapInstance,\r\n      path: linePath,\r\n      geodesic: true,\r\n      strokeColor: \"#FF0000\",\r\n      strokeOpacity: 1.0,\r\n      strokeWeight: 2,\r\n    });\r\n  }, [isMapLoaded, pos]);\r\n\r\n  function haversineDistance(coords1, coords2) {\r\n    if (!coords1 || !coords2 || !coords1.lat || !coords2.lng) return;\r\n    const toRadians = (degrees) => degrees * (Math.PI / 180);\r\n\r\n    const lat1 = toRadians(coords1.lat);\r\n    const lng1 = toRadians(coords1.lng);\r\n    const lat2 = toRadians(coords2.lat);\r\n    const lng2 = toRadians(coords2.lng);\r\n\r\n    const dlat = lat2 - lat1;\r\n    const dlng = lng2 - lng1;\r\n\r\n    const a =\r\n      Math.sin(dlat / 2) ** 2 +\r\n      Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlng / 2) ** 2;\r\n\r\n    const c = 2 * Math.asin(Math.sqrt(a));\r\n\r\n    const R = 6371;\r\n    return R * c * 1000;\r\n  }\r\n\r\n  const moveMarkerSmoothly = useCallback(\r\n    (startPos, endPos) => {\r\n      const steps = 50;\r\n      let curStep = 0;\r\n\r\n      const animate = setInterval(() => {\r\n        const newPosition = interpolate(startPos, endPos, ++curStep / steps);\r\n        if (markerRef.current) {\r\n          markerRef.current.position = newPosition;\r\n        }\r\n\r\n        if (curStep === steps) {\r\n          endPos.time = Date.now();\r\n          curStep = 0;\r\n          clearInterval(animate);\r\n          setLinePath((prevPath) => {\r\n            const pathLength = prevPath.length;\r\n            if (pathLength >= 2) {\r\n              const dist = haversineDistance(\r\n                prevPath[pathLength - 1],\r\n                prevPath[pathLength - 2]\r\n              );\r\n              setCheckpointDistance(dist);\r\n              setTotalDisplacement(\r\n                parseInt(\r\n                  haversineDistance(prevPath[pathLength - 1], prevPath[0])\r\n                )\r\n              );\r\n              if (dist < 5) {\r\n                return [...prevPath.slice(0, -1), endPos];\r\n              }\r\n              setTotalDistance((d) => d + dist);\r\n            }\r\n            if (prevPath.length > 50) {\r\n            }\r\n            return [...prevPath, endPos];\r\n          });\r\n        }\r\n      }, 10);\r\n    },\r\n    [checkpointDistance]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!lineRef.current) return;\r\n    lineRef.current.setPath(linePath);\r\n\r\n    if (linePath.length >= pathToProcess) {\r\n      (async () => {\r\n        const start = Math.max(0, pathToProcess - 20); // Ensure non-negative slicing\r\n        const data = await coordsToSnapRoad(\r\n          linePath.slice(start, pathToProcess)\r\n        );\r\n\r\n        setLinePath((prevPath) => {\r\n          const newArray = [\r\n            ...prevPath.slice(0, start),\r\n            ...data,\r\n            ...prevPath.slice(pathToProcess),\r\n          ];\r\n          return newArray;\r\n        });\r\n\r\n        setPathToProcess((prev) => prev + 20); // Move to next batch\r\n      })();\r\n    }\r\n  }, [linePath]);\r\n\r\n  useEffect(() => {\r\n    if (!isMapLoaded) return;\r\n\r\n    const watchId = navigator.geolocation.watchPosition(\r\n      (position) => {\r\n        const newPos = {\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        };\r\n        setPos((prevPos) => {\r\n          if (prevPos) {\r\n            moveMarkerSmoothly(prevPos, newPos);\r\n          } else {\r\n            newPos.time = Date.now();\r\n            setLinePath([newPos]);\r\n          }\r\n          return newPos;\r\n        });\r\n      },\r\n      (error) => {\r\n        alert(\"Location access denied or not available.\");\r\n      },\r\n      { enableHighAccuracy: true, maximumAge: 0 }\r\n    );\r\n\r\n    return () => navigator.geolocation.clearWatch(watchId); // Cleanup watch\r\n  }, [isMapLoaded, moveMarkerSmoothly]);\r\n\r\n  // Interpolate between two positions\r\n  const interpolate = (start, end, factor) => {\r\n    return {\r\n      lat: start.lat + (end.lat - start.lat) * factor,\r\n      lng: start.lng + (end.lng - start.lng) * factor,\r\n    };\r\n  };\r\n\r\n  const coordsToSnapRoad = async () => {\r\n    try {\r\n      const mappedCoords = linePath.map((e) => `${e.lat},${e.lng}`).join(\"|\");\r\n\r\n      const url = `https://roads.googleapis.com/v1/snapToRoads?path=${mappedCoords}&interpolate=true&key=${process.env.REACT_APP_GOOGLE_MAP_API}`;\r\n\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n      // const snappedPoints = data?.snappedPoints || [];\r\n\r\n      // setLinePath([\r\n      //   ...snappedPoints.map(({ location }) => ({\r\n      //     lat: location.latitude,\r\n      //     lng: location.longitude,\r\n      //   })),\r\n      //   { lat: pos.lat, lng: pos.lng },\r\n      // ]);\r\n    } catch (error) {\r\n      console.error(\"Error snapping to road:\", error);\r\n    }\r\n  };\r\n\r\n  const mapCenter = () => {\r\n    map.panTo(pos);\r\n  };\r\n  return (\r\n    <div className=\"map-container\">\r\n      {pos ? (\r\n        <div>\r\n          <div id=\"map\"></div>\r\n          <div className=\"statistics\">\r\n            <div className=\"row p-0 stats-child\">\r\n              <div className=\"col-6 col-sm-8 col-lg-3 p-0\">\r\n                <div className=\"h-100 d-inline-flex justify-content-center align-items-center bg-primary w-100 pt-3\">\r\n                  <div className=\"text-center\">\r\n                    <h3>\r\n                      {totalDisplacement > 1000\r\n                        ? `${(totalDisplacement / 1000).toFixed(1)}km`\r\n                        : `${totalDisplacement}m`}\r\n                    </h3>\r\n                    <p>Total Displacement</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-6 col-sm-4 col-lg-3 p-0\">\r\n                <div className=\"h-100 d-inline-flex justify-content-center align-items-center bg-success w-100 pt-3\">\r\n                  <div className=\"text-center\">\r\n                    <h3>\r\n                      {totalDistance > 1000\r\n                        ? `${(totalDistance / 1000).toFixed(1)}km`\r\n                        : `${parseInt(totalDistance)}m`}\r\n                    </h3>\r\n                    <p>Total Distance</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-6 col-lg-3 p-0\">\r\n                <div className=\"h-100 d-inline-flex justify-content-center align-items-center bg-warning w-100 pt-3\">\r\n                  <div className=\"text-center\">\r\n                    <h3>\r\n                      {checkpointDistance > 1000\r\n                        ? `${(checkpointDistance / 1000).toFixed(1)}km`\r\n                        : `${parseInt(checkpointDistance)}m`}\r\n                    </h3>\r\n                    <p>Checkpoint Distance</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"col-6 col-lg-3  p-0\">\r\n                <div className=\"h-100 d-inline-flex justify-content-center align-items-center bg-info w-100 pt-3\">\r\n                  <div className=\"text-center\">\r\n                    <h3>{linePath.length - 1}</h3>\r\n                    <p>Total Checkpoint{linePath.length > 2 ? \"s\" : \"\"}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"stats-toggler container py-2 text-center\">\r\n              <div className=\"inner\">\r\n                <button\r\n                  onClick={statsViewerToggle}\r\n                  className={\r\n                    statsView\r\n                      ? \"btn btn-primary rounded-0\"\r\n                      : \"btn btn-secondary rounded-0\"\r\n                  }\r\n                >\r\n                  {statsView ? <FaArrowUp /> : <FaArrowDown />}\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-secondary rounded-0\"\r\n                  onClick={coordsToSnapRoad}\r\n                >\r\n                  <FaWrench />\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-secondary rounded-0\"\r\n                  onClick={mapCenter}\r\n                >\r\n                  <FaCrosshairs />\r\n                </button>\r\n                <Link\r\n                  className=\"btn btn-secondary rounded-0\"\r\n                  to=\"/PocketGPS/history\"\r\n                >\r\n                  <FaHistory />\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <Loader />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["Loader","_jsx","className","children","Map","pos","setPos","useState","map","setMap","linePath","setLinePath","isMapLoaded","setIsMapLoaded","checkpointDistance","setCheckpointDistance","totalDistance","setTotalDistance","totalDisplacement","setTotalDisplacement","markerRef","useRef","lineRef","statsView","setStatsView","pathToProcess","setPathToProcess","haversineDistance","coords1","coords2","lat","lng","toRadians","degrees","Math","PI","lat1","lng1","lat2","dlat","dlng","a","sin","cos","asin","sqrt","useEffect","window","google","script","document","createElement","src","concat","process","async","defer","head","appendChild","onload","mapInstance","maps","getElementById","center","zoom","mapId","current","marker","AdvancedMarkerElement","position","title","id","Polyline","path","geodesic","strokeColor","strokeOpacity","strokeWeight","moveMarkerSmoothly","useCallback","startPos","endPos","curStep","animate","setInterval","newPosition","interpolate","time","Date","now","clearInterval","prevPath","pathLength","length","dist","parseInt","slice","d","setPath","start","max","data","coordsToSnapRoad","prev","watchId","navigator","geolocation","watchPosition","newPos","coords","latitude","longitude","prevPos","error","alert","enableHighAccuracy","maximumAge","clearWatch","end","factor","mappedCoords","e","join","url","response","fetch","ok","Error","status","statusText","json","console","_jsxs","toFixed","onClick","statsViewerToggle","trgt","getElementsByClassName","style","height","overflow","FaArrowUp","FaArrowDown","FaWrench","mapCenter","panTo","FaCrosshairs","Link","to","FaHistory"],"sourceRoot":""}